buildscript {
    ext {
        protobufVersion = "3.7.1"
    }
    repositories {
        mavenLocal()
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        mavenCentral()
    }
    dependencies {
        classpath "com.google.protobuf:protobuf-gradle-plugin:0.8.9"
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'com.google.protobuf'

group = 'com.github.BAData'

repositories {
    mavenLocal()
    maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
    mavenCentral()
}

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
    generatedFilesBaseDir = "$projectDir/src"
}

dependencies {
    compile("com.google.protobuf:protobuf-java:${protobufVersion}")
    compile("com.google.protobuf:protobuf-java-util:${protobufVersion}")
    compile 'net.bytebuddy:byte-buddy:1.10.1'
    testCompile 'junit:junit:4.12'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.warnings = false
}

tasks.withType(Test) {
    reports.junitXml.enabled = true
    reports.html.enabled = false
}
publishing {
    repositories {
        if (project.version.endsWith('-SNAPSHOT')) {
            maven {
                credentials {
                    username System.getenv('username')
                    password System.getenv('password')
                }
                url System.getenv('snapshot_repo_url')
            }
        } else {
            maven {
                credentials {
                    username System.getenv('username')
                    password System.getenv('password')
                }
                url System.getenv('release_repo_url')
            }
        }

    }
    publications {
        maven(MavenPublication) {
            version version
            from components.java

            artifact sourcesJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }

            pom.withXml {
                // Fix dependency scoping.
                asNode().dependencies.'*'.findAll() {
                    it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                        dep.name == it.artifactId.text()
                    }
                }.each() {
                    it.scope*.value = 'compile'
                }
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name PROJECT_NAME
                    description PROJECT_DESC
                }
            }
        }
    }
}
